PILOT APP

	•	Architecture

I have used a MVVM with coordinators to navigate between scenes, dependency injection for creating the scenes, and combine to communicate ViewControllers with its Views

	•	Key Classes

- Dependencies: where the necessary components for each scene are created: coordinator, viewController, viewModel and useCases
- Coordinator: manages the navigation between scenes
- ViewController: uses interface layer where all the UI Components are. Displays the data and capture user input
- ViewModel: prepares and provides data for the view to display. 
- Model: none of the scenes needed a model. But a DTO file was created to hold the information structs PilotLicensesDTO and PersistedUser
- UseCases: gathers information needed for the scene

- Common Components: 
	- LabeledTextField: personalized UIView to create a stackView with label for the name of the field, textfield to write the info, an optional picker to select the pilot license and a label list of error for the text in that field.
	- Validator: checkers for the differents checks like the name, length, uppercase, lowercase, digit, and matching passwords

	•	Testing Strategy

Choosing this architecture made difficult to implement viewController and viewModel test, so I didn’t have time to do them
I did test for the LabeledTextField and Validators
UITests for the two main scenes and main behavior
